#!/usr/bin/env ruby

require 'drydock'

event_handler = Proc.new do |event, is_new, serial|
  timestamp = Time.at(event.time)
  time_string = timestamp.strftime('%H:%M:%S')
  long_id = event.id.to_s
  short_id = if long_id.include?(':') || long_id.include?('/')
    long_id
  else 
    long_id.slice(0, 12)
  end

  if is_new
    Drydock.logger.info "    --> #{short_id} #{event.status}"
  else
    Drydock.logger.debug "   --> #{short_id} #{event.status}"
  end
end

STDOUT.sync = true
Drydock.logger = Logger.new(STDOUT).tap do |l|
  l.level = Logger::INFO
  l.formatter = Drydock::Formatter.new
end

opts = {
  cache: Drydock::Caches::FilesystemCache.new,
  event_handler: event_handler
}

Drydock.build(opts) do |project|
  Drydock.logger.info "Drydock v#{Drydock.version}"

  filename = ARGV[0] || 'Drydockfile'
  contents = File.read(filename)
  Drydock.logger.info "Loaded #{contents.length} bytes from #{filename}"

  [contents, filename]
end
